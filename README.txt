银行管理系统
1.	项目描述
1.1	项目背景
    随着社会的不断发展，科学的快速进步。计算机逐渐由笨重变为轻便，由缓慢变为迅捷，成功的融入了人们日常生活的方方面面，变得越来越普及。如今的我们，正处在一个信息量剧增，快速发展的信息时代，计算机作为我们获取信息的一个重要途径，其重要性不言而喻，早已完全渗透进了人们的生活。与此同时，计算机逐渐的走入了各行各业，潜移默化的改变着人们的工作方式。
    其中金融行业作为一个包含了庞大数额，大量信息的行业毫无疑问率先享受了计算机所带来的便利。在金融行业里，银行系统作为与民众的金钱信息进行直接联系的系统毫无疑问是最重要的。银行系统事关国之发展，民之财政，因为它的重要性，它的管理模式也随着时代的发展而快速的进步着，为实现人们方便省时的办理银行储蓄业务而不断地改良着。
    于是从银行系统中诞生出了银行计算机储蓄系统。银行储蓄系统的创造，旨在可以为人们更加方便快捷的办理与银行储蓄相关的业务，使人们可以在银行所提供的自动存取款机或是在互联网上就可以简单方便地办理存款、取款、查账、转账、挂失等等业务。银行储蓄业务既然是以方便用户为原则而创建，自然是以高效、互联为主要特征，为用户只需要进行简单的操作甚至是足不出户就可以提供各项业务的综合办理。
1.2	项目意义
    本项目的意义在于运用目前我们已掌握的知识，并辅以网络查询得来的资料完成一个由团队协作所完成的项目。而不是以运用大量的时间以及精力去完成一个成熟漂亮，功能丰富多样，在当今市场上早已广泛运用且可称之为泛滥的银行计算机储蓄业务为这次项目的意义。最后这个项目所达成的可能并不是一个可以直接投入使用的完全成熟的项目，但它是以一个完整的银行储蓄业务的雏形而存在的，这个项目已经实现了身为银行储蓄系统所需要的最基础功能，具有发展为一个完整成熟系统的潜力，后来的开发者可以在它的基础上进行扩充和完善来达成将它变为一个可以投入使用的系统的目的。
1.3	项目目标
    本项目目标为使用Java语言完成一个易扩充、易维护且可视的银行计算机储蓄系统的简易版本，该项目中包含了银行储蓄系统所需的较为完善的基本功能，成功完成了一个储蓄系统所需要实现的职能。具体表现有：实现了用户以姓名、身份证等基本信息为开户条件并由用户自己决定开户账号，密码及开户金额的开户功能；实现了以已有用户信息作为验证的登陆功能；只有登陆后方才能够使用的对自身账号的余额查询以及取款、存款等功能；同时还有连接已有双方信息的转账功能；为避免用户遗忘密码，设置了以个人信息为凭借的相关的挂失功能；以及为了确保密码泄露而导致的账户安全问题而添加的改密功能等。

2.项目需求分析：
2.1主要任务：
实现具有图形化界面的银行管理系统

2.2需要实现的关键服务和功能：
	⑴菜单的实现
我们将用户入用户名部分加入一个面板， 密码部分加入一个面板， 最后按钮部分在加入一个面板，最后添加到窗体中。因为我们需要监听信息所以直接继承了事件监听类并做出了针对登录，重置，注册3个按钮的监听（详见源码）。
⑵登录
查询、存款、取款、修改密码、转账等功能都需要进行登陆操作，所以我们实现了一个login类（详见源码）。当用户想使用相关功能时将会进入login类进行验证操作，如果账户存在，登陆成功即可进入不同的界面继续操作。同时，为了为了保留登陆前的选项，我们又给login类传了一个Swing类型的参数，保留了上一步的操作。

	⑶开户与挂失
①开户：
此功能主要就是收集姓名、身份证号、账户名、密码、开户金额等相关信息，但由于用户的输入必须符合客观实际，如身份证号要满18位、开户金额必须大于0元等，我们将在开户操作中的写入信息进行处理，在写入之前验证信息的合法性或账户是否存在，于是我们调用了new Check().checkmoney(); 和new Check().check2(message[2]); 来进行检验并用new UserMessage().write(message)完成对用户信息的写入。

	②挂失：
通过确定键跳转到自己写的ok()方法中，重置键调用clear方法，对内容进行清空。这里需要提的是，挂失类中的信息验证挂失类中的信息验证和开户有所不同，虽然都用Check.check2 验证了是否存在。但是，我们在找回密码时也要验证其账户名与个人的信息如身份证号和姓名是否与开户时相同所以我们又在Check类编写了一个check3 的方法而且该方法是有返回值的，我们返回找回密码根据思路实现代码 这里与前面多了一个JTextArea(); 文本框用来显示返回的密码。

	⑷查询：
在查询功能中，我们进行了部分创新。考虑到所涉及信息均为用户个人隐私，所以我们在代码中加入一小部分以实现对用户信息的保密，即在查询时，将姓名的第一个字变成“*”，将身份证号的第6到12位也变成“*”。（具体实现见源码）

	⑸验证：
关于 BufferedReader和FileReader：
FileReader : 字符流 
BufferedReader : 也是字符流，但是在BufferedReader可以先把数据放到一个缓存区里，然后在进行处理，而且在BufferedReader 里有一个readLine()方法。 （所谓缓冲区，就是能够一次性读取一块缓冲区大小的数据，再从缓冲区中去读取数据，而不用一点一点地直接从硬盘中抽取数据。）
这里我们主要用readline方法

在验证类中我们一共实现了6个方法：

① 在登录时，验证账号密码是否正确：
我们在实现时思路如下：String 型数组message将分割后的每个信息存储起来，从message[0] ~ message[4] 存储信息分别为姓名，身份证号，账户名， 密码，余额按行读取，验证是否提取信息验证

②在注册时 验证账号是否存在：原理同上

③挂失找回密码时需要验证，姓名，身份证号和账户是否与注册时保持一致 ：
与上面的差别主要在这段代码
if (name.equals(message[0])&&userid.equals(message[1])&&countname.equals(message[2]))
                return message[3];
验证是否匹配，若匹配，返回密码

④各种输入金额页面，判断金额是否合法：
通过逐项比较输入的信息是否为0~9来验证金额是否合法

⑤登录时验证用户名和密码是否为中文：

public boolean checkcountname(String countname) 
{ 
	Pattern p = Pattern.compile(“[\u4e00-\u9fa5]”); 
	Matcher m = p.matcher(countname); 
	if (m.find()) { 
	return true; 
} 
	return false; 
}
这里我们主要通过\u4e00-\u9fa5来进行验证，\u4e00-\u9fa5为Unicode编码，这样可以覆盖到所有中文。

⑥注册时验证姓名是否为中文：
public boolean checkname(String name)
    {
        int n = 0;
        for(int i = 0; i < name.length(); i++) {
            n = (int)name.charAt(i);
            if(!(19968 <= n && n <40869)) {
                return false;
            }
        }
        return true;
    }
原理同上面类似。

	⑹用户信息的读写：
		此部分难度较大，我们将其分成四部分：
①将注册的信息格式化写入文本：
创建StringBuffer对象去存储文本信息，然后写入
②读取信息，将用户名信息返回（如果不存在返回null），和Check类配合使用 
③在存款，取款和转账操作时更新金额：
按行读入，如果需要修改，修改后再加入到BufferString的对象中。（详见源码）
④修改密码时更新密码：
原理同上。

	⑺存款与取款：
存款与取款涉及到信息的写入、更新、判断等相关功能，由于前面均已提及，这里便不再赘述。

 
3.设计方案
3.1 类图展示：
3.2 系统总体结构：

3.3 系统功能模块分解：
3.3.1登录
验证登录信息，并做处理。读取用户输入的账号密码，对账号密码进行过滤，与数据库进行验证，然后由登陆界面跳转至功能选择菜单。
3.3.2开户
开户时需要储户输入个人信息，包括姓名，身份证号，账户名，密码，开户金额等信息。注册成功， 打包为信息数组传递给UserMessage进行更新操作。需要注意的是：身份证号为18位，并且开户金额必须大于0元。
所以我们在事件监听时，要注意：由于开户操作需要进行写入信息的处理，我们会验证该账户是否合法或存在，然后写入UserMessage，在代码中调用的
new Check().checkmoney();//验证金额信息是否合法
Check().check2(）;//是我们进行账户是否存在的验证操作
new UserMessage().write(message); //是将文件写入文本存储
3.3.3挂失
挂失类中的信息验证和开户有所不同，虽然都用Check.check2验证了账户是否存在，但是 我们在找回密码时，也要验证其账户名与个人的信息（身份证号和姓名）是否与开户时相同。 所以我们又在Check类编写了一个check3的方法，而且该方法是有返回值的，我们返回找回密码。
3.3.4用户信息读写
分为4部分组成：1.将注册的信息格式化写入文本，创建StringBuffer对象去存储文本信息；2.读取信息，将用户名信息返回（如果不存在返回null），和Check类配合使用；3.在存款、取款和转账操作时更新金额；4.修改密码时更新密码。
3.3.5验证
1. 在登录时，验证账号密码是否正确；
2. 在注册时，验证账号是否存在；
3. 在挂失时，找回密码需要验证姓名、身份证号和账户是否与注册时保持一致；
4. 各种输入金额页面，判断金额是否合法；
5. 登录时验证用户名和密码是否为中文；
6. 注册时验证姓名是否为中文。
3.3.6查询
查询时储户提供账号，密码。返回查询信息包括账户的信息（姓名，身份证号，余额）。但是为了保护个人隐私，我们将部分信息用*代替后再显示。
3.3.7存款
存款时储户提供事先获得的账号及存储的金额（现金），将金额加到账户原有金额中，然后返回账号中现有余额。判断存入金额合法后，再将账户和金额传入，进行存储；若不合法则返回提示消息
3.3.8取款
对取钱操作的实现，取款时储户提供事先获得的账号及要提取的金额（现金），将账号中原有的金额减去要提取的金额，将现金交给储户，然后返回本次操作的信息包括提取的金额，账号中现有的金额。但在输入金额时要判断金额的大小，是否能够取出，且不能出现负数。即余额不足不能扣款的情况，且输入金额必须合法。
3.3.9转账
转账时储户提供对方账号，转账金额，然后跳转到确认界面，让用户确认对方信息，再进行转账操作。将转出账号中的金额减去转账金额，然后返回本次操作的信息包括转账的金额，转出账号现有的金额。
转账操作分为2个类：一个是Transfer 负责界面的书写，包括输入对方账户和转账金额 （当然在此有验证对方账户是否存在的功能）；另外一个是TransferToOthers ，是我们确认对方信息，我们从文件读出对方信息（包括对方姓名、身份证号、对方账号），然后确定才进行转账操作，否则退出。
3.3.10改密
用户根据提示输入新密码两次，当两次密码输入一致后，调用UserMessage的updatepwd函数更新密码，完成后密码修改成功。


